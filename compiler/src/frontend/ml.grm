(* Heavily modified from SML/NJ sources by sweeks@sweeks.com *)
(* Further modified from MLton by Gian Perrone *)

(* ml.grm
 *
 * Copyright 1989,1992 by AT&T Bell Laboratories
 *)

structure A = AST

type clause = {pats : A.pat list,
               resultType : A.ty option,
               body : A.exp}

type match = (A.pat * A.exp) list

  %%
  %term
      CHAR of int
    | INT of {digits: string,
              negate: bool,
              radix: StringCvt.radix}
    | LONGID of string
    | REAL of string
    | STRING of int vector
    | TYVAR of string
    | WORD of {digits: string,
               radix: StringCvt.radix}
    | ABSTYPE | AND | ANDALSO | ARROW | AS | ASTERISK | BAR | CASE | COLON
    | COLONGT | COMMA | DATATYPE | DOTDOTDOT | ELSE | END | EOF | EQUALOP
    | EQTYPE | EXCEPTION | DO | DARROW | FN | FUN | FUNCTOR | HANDLE | HASH
    | IF | IN | INCLUDE | INFIX | INFIXR | LBRACE | LBRACKET | LET | LOCAL
    | LPAREN | NONFIX | ORELSE | OF | OP | OPEN | OVERLOAD | RAISE | RBRACE 
    | RBRACKET | REC | RPAREN | SEMICOLON | SHARING | SIG | SIGNATURE | STRUCT
    | STRUCTURE | THEN | TYPE | VAL | WHERE | WHILE | WILD | WITH | WITHTYPE
      (* Extensions *)
    | BUILD_CONST | COMMAND_LINE_CONST | CONST 
    | ADDRESS | EXPORT | IMPORT | SYMBOL 
    | PRIM

%nonterm
         aexp of A.exp
       | andspecs of unit
       | apat of A.pat
       | apat' of A.pat
       | apatnode of A.pat
       | apats of A.pat list
       | app_exp of A.exp list
       | app_exp1 of A.exp list
       | arg_fct of A.structexp
       | clause of clause
       | clauses of clause list
       | clausesTop of clause list
       | commapats of A.pat list
       | con of A.exp
       | const of A.exp
       | const' of A.exp
       | constr of A.exp * A.ty option
       | constraint of A.ty option
       | constrs of (A.exp * A.ty option) list
       | constOrBool of A.exp
       | datBind of A.bind
       | datBindNoWithtype of A.bind 
       | datatypeRhs of A.bind
       | datatypeRhsNoWithtype of A.bind
       | datatypeRhsnode of A.bind
       | datatypeRhsnodeNoWithtype of A.bind
       | db of A.ty * (A.exp * A.ty option) list
       | dbs of (A.ty * (A.exp * A.ty option) list) list
       | dbs' of (A.ty * (A.exp * A.ty option) list) list
       | dec of A.dec
       | decnode of A.dec
       | decnolocal of A.dec
       | decs of A.dec
       | decsnode of A.dec
       | digit of int
       | eb of unit 
       | ebrhs of unit
       | ebrhsnode of unit
       | ebs of unit
	   | elabel of (A.exp * A.exp)
       | elabels of (A.exp * A.exp) list
       | exndesc of A.exp * A.ty option
       | exndescs of (A.exp * A.ty option) list
       | exp of A.exp
       | exp_2c of A.exp list
       | exp_list of A.exp list
       | exp_ps of A.exp list
       | expnode of A.exp
       | expsAndTopdecs of A.dec list list
       | fctarg of unit
       | fctid of unit
       | field of A.exp
       | fixity of A.fixity
       | funbinds of unit
       | funbinds' of unit
       | funbinds'1 of unit
       | funbinds'1' of unit
       | funbinds'2 of unit
       | funs of clause list list
       | id of A.symbol
       | idEqual of A.symbol
       | idNoAsterisk of A.symbol
       | int of int 
       | longcon of unit 
       | longid of A.symbol list
       | longidEqual of A.symbol list
       | longidNoAsterisk of A.symbol list
       | longstrid of unit
       | longstrideqns of unit
       | longstrids of unit
       | longtycon of A.ty
       | longtyconeqns of A.ty list
       | longvidands of A.symbol list
       | longvid of A.symbol
       | longvidNoEqual of A.symbol
       | match of match 
       | opaspat of A.pat option
       | opcon of A.exp
       | ot_list of A.exp list
       | pat of A.pat
       | pat_2c of A.pat list
       | patitem of A.pat
       | patitems of A.pat list
	   | patnode of A.pat
       | pats of A.pat list
       | priority of A.priority
       | program of A.program
       | repl of A.bind
       | rule of A.pat * A.exp
       | rules of match
       | rvalbind of (A.pat * match) list
       | rvalbindRest of (A.pat * match) list
(*     | sdec of unit
       | sdecs of unit
       | sdecsPlus of unit
       | sharespec of unit
       | sigbinds of unit
       | sigbinds' of unit
       | sigbinds'' of unit
       | sigconst of unit
       | sigexp of unit
       | sigexp' of unit
       | sigexp'node of unit
       | sigexpnode of unit
       | sigid of unit
       | sigids of unit
       | spec of Spec.t
       | specnode of Spec.node
       | specs of Spec.t
       | strbinds of strbind list
       | strbinds' of Strexp.t * strbind list
       | strbinds'1 of strbind whereAnd
       | strbinds'1' of strbind whereAnd
       | strbinds'2 of strbind list
       | strdec of Strdec.t
       | strdecnode of Strdec.node
       | strdecs of Strdec.t
       | strdecsnode of Strdec.node
       | strdescs of strdesc list
       | strdescs' of strdesc whereAnd
       | strdescs'' of strdesc whereAnd
       | strexp of Strexp.t
       | strexp1 of Strexp.t * (Sigexp.t -> SigConst.t) * Sigexp.t
       | strexp2 of Strexp.t
       | strexp2node of Strexp.node
       | strexpnode of Strexp.node
       | strid of Strid.t  *)
       | string of string
       | symattributes of unit 
       | tlabel of (A.exp * A.ty)
       | tlabels  of (A.exp * A.ty) list
       | topdec of A.dec
       | topdecnode of A.dec
       | topdecs of A.dec list list
       | tuple_ty of A.ty list
       | ty of A.ty
       | ty' of A.ty
       | ty'node of A.ty
       | ty0_pc of A.ty list
       | ty1 of A.ty
       | tyOpt of A.ty option
       | tycon of A.ty
       | tynode of A.ty
       | typBind of A.bind
       | typBind' of A.bind list 
       | typBind'' of A.bind list
       | typdesc of A.ty
       | typdescs of A.ty list
       | tyvar of A.ty
       | tyvar_pc of A.ty list
       | tyvars of A.ty list
       | tyvarseq of A.ty list
       | valbind of (A.pat * A.exp) list * (A.pat * match) list
       | valbindRest of (A.pat * A.exp) list * (A.pat * match) list
       | valbindTop of (A.pat * A.exp) list * (A.pat * match) list
       | valdesc of unit
       | valdescs of unit
       | var of A.exp
       | vid of A.exp
       | vidNoEqual of A.exp
       | vids of A.exp list
       | wherespec of unit
       | wherespecs of unit
       | wherespecs' of unit
       | withtypes of A.bind
       | word of int

%verbose
%pos SourcePos.t
%eop EOF
%noshift EOF

%header (functor MLLrValsFun (structure Token: TOKEN
                              structure Ast: AST))

%nonassoc WITHTYPE
%right AND
%right ARROW
%right DARROW 
%left DO
%left ELSE
%left RAISE
%right HANDLE
%left ORELSE
%left ANDALSO
%right AS
%left COLON

%name ML

%keyword ABSTYPE AND AS CASE DATATYPE DOTDOTDOT ELSE END 
  EQTYPE EXCEPTION  DO  DARROW  FN  FUN  FUNCTOR  HANDLE
  IF IN INCLUDE  INFIX  INFIXR  LET  LOCAL  NONFIX  OF  OP
  OPEN OVERLOAD  RAISE  REC  SHARING  SIG  SIGNATURE  STRUCT
  STRUCTURE THEN TYPE VAL WHILE WHERE WITH WITHTYPE
  ORELSE ANDALSO

%change -> VAL | -> THEN | -> ELSE | -> LPAREN | -> SEMICOLON | 
        DARROW -> EQUALOP | EQUALOP -> DARROW | AND -> ANDALSO | COLON -> OF |
        SEMICOLON -> COMMA | COMMA -> SEMICOLON |
        -> IN LONGID END | -> ELSE LONGID

%value CHAR (Char.ord #"a")
%value INT ({digits = "0", negate = false, radix = StringCvt.DEC})
%value LONGID ("bogus")
%value REAL ("13.0")
%value STRING (Vector.fromList [])
%value TYVAR ("'a")
%value WORD ({digits = "0", radix = StringCvt.DEC})

%%

program: expsAndTopdecs (Program.T expsAndTopdecs)

expsAndTopdecs:
    exp SEMICOLON expsAndTopdecs ([Topdec.fromExp exp] :: expsAndTopdecs)
  | topdecs (topdecs)

topdecs:
      ([])
  | topdec topdecs (consTopdec (topdec, topdecs))
  | SEMICOLON expsAndTopdecs ([] :: expsAndTopdecs)

topdec : topdecnode (Topdec.makeRegion' (topdecnode,
                                         topdecnodeleft,
                                         topdecnoderight))

topdecnode
   : strdec
     (Topdec.Strdec strdec)
   | SIGNATURE sigbinds
     (let
         val sigbinds = Vector.fromList sigbinds
         val d = Topdec.Signature sigbinds
      in
         d
      end)
   | FUNCTOR funbinds
     (Topdec.Functor (Vector.fromList funbinds))

(*---------------------------------------------------*)
(*                    Structures                     *)
(*---------------------------------------------------*)

strdecs : strdecsnode (Strdec.makeRegion'
                       (strdecsnode, strdecsnodeleft, strdecsnoderight))

strdecsnode :                    (Strdec.Seq [])
            | SEMICOLON strdecs  (Strdec.Seq [strdecs])
            | strdec strdecs     (Strdec.Seq [strdec, strdecs])

strdec : strdecnode (Strdec.makeRegion' (strdecnode,
                                         strdecnodeleft, strdecnoderight))

strdecnode
   : STRUCTURE strbinds
     (let
         val strbinds = Vector.fromList strbinds
         val d = Strdec.Structure strbinds



      in
         d
      end)
   | LOCAL strdecs IN strdecs END  (Strdec.Local (strdecs1, strdecs2))
   | decnolocal
     (Strdec.Core (Dec.makeRegion' (decnolocal,
                                    decnolocalleft, decnolocalright)))

strbinds : strid sigconst EQUALOP strbinds'
           (let val (def,strbinds) = strbinds'
            in {name = strid, def = def, constraint = sigconst}
               :: strbinds
            end)

strbinds' : strexp1 strbinds'1    (augment1 (strexp1, strbinds'1))
          | strexp2 strbinds'2    ((strexp2,strbinds'2))

strbinds'1 : strbinds'2                   (([], strbinds'2left, strbinds'2))
           | WHERE wherespec strbinds'1'  (cons1 (wherespec,strbinds'1'))

strbinds'1' : strbinds'1                 (strbinds'1)
            | AND wherespec strbinds'1'  (cons1 (wherespec,strbinds'1'))

strbinds'2 :               ([])
           | AND strbinds  (strbinds)

strexp : strexpnode (Strexp.makeRegion' (strexpnode,
                                        strexpnodeleft, strexpnoderight))

strexpnode
  : strexp1
    (let
        val (strexp, sigconst, sigexp) = strexp1
     in
        Strexp.Constrained (strexp, sigconst sigexp)
     end)
  | strexp1 wherespecs
    (let
        val (strexp,sigconst,sigexp) = strexp1
     in
        Strexp.Constrained
        (strexp,
         sigconst (Sigexp.wheree
                   (sigexp, wherespecs,
                    Region.extendRight (Sigexp.region sigexp,
                                        wherespecsright))))
     end)
  | strexp2node
    (strexp2node)

strexp1 : strexp COLON sigexp'    ((strexp,SigConst.Transparent,sigexp'))
        | strexp COLONGT sigexp'  ((strexp,SigConst.Opaque,sigexp'))

strexp2 : strexp2node (Strexp.makeRegion'
                       (strexp2node, strexp2nodeleft, strexp2noderight))

strexp2node
        : longid                     (Strexp.Var (Longstrid.fromSymbols longid))
        | STRUCT strdecs END         (Strexp.Struct strdecs)
        | longid arg_fct
          (Strexp.App (Fctid.fromSymbol (ensureNonqualified longid), arg_fct))
        | LET strdecs IN strexp END  (Strexp.Let (strdecs,strexp))

arg_fct : LPAREN strexp RPAREN   (strexp)
        | LPAREN strdecs RPAREN  (Strexp.makeRegion'
                                  (Strexp.Struct strdecs,
                                   strdecsleft, strdecsright))

(*---------------------------------------------------*)
(*                    Signatures                     *)
(*---------------------------------------------------*)

sigexp
  : sigexp'
    (sigexp')
  | sigexp' wherespecs
    (Sigexp.wheree (sigexp', wherespecs, reg (sigexp'left, wherespecsright)))

wherespecs : wherespecs' (Vector.fromList wherespecs')

wherespecs'
  : WHERE wherespec              ([wherespec])
  | WHERE wherespec wherespecs'  (wherespec :: wherespecs')
  | WHERE wherespec andspecs     (wherespec :: andspecs)

andspecs
  : AND wherespec              ([wherespec])
  | AND wherespec andspecs     (wherespec :: andspecs)
  | AND wherespec wherespecs'  (wherespec :: wherespecs')

sigbinds: sigid EQUALOP sigexp' sigbinds'  (augment (sigid, sigexp', sigbinds'))

sigexp' : sigexp'node (Sigexp.makeRegion' (sigexp'node,
                                          sigexp'nodeleft,
                                          sigexp'noderight))

sigexp'node : sigid                      (Sigexp.Var sigid)
            | SIG specs END              (Sigexp.Spec specs)

sigbinds':                             (([], defaultPos, []))
         | AND sigbinds                (([], defaultPos, sigbinds))
         | WHERE wherespec sigbinds''  (cons1 (wherespec,sigbinds''))

sigbinds'' : sigbinds'                 (sigbinds')
           | AND wherespec sigbinds''  (cons1 (wherespec,sigbinds''))

wherespec  : TYPE tyvars longtycon EQUALOP ty  ({tyvars = tyvars,
                                                 longtycon = longtycon,
                                                 ty = ty})

sigconst :                 (SigConst.None)
         | COLON sigexp    (SigConst.Transparent sigexp)
         | COLONGT sigexp  (SigConst.Opaque sigexp)

specs  :                   (Spec.makeRegion (Spec.Empty, Region.bogus))
       | SEMICOLON specs   (specs)
       | spec specs        (Spec.seq (spec, specs))

spec : specnode (Spec.makeRegion' (specnode, specnodeleft, specnoderight))

specnode : VAL valdescs         (Spec.Val (Vector.fromList valdescs))
         | TYPE typdescs        (Spec.Type (Vector.fromList typdescs))
         | TYPE typBind         (Spec.TypeDefs typBind)
         | EQTYPE typdescs      (Spec.Eqtype (Vector.fromList typdescs))
         | DATATYPE datatypeRhsNoWithtype (Spec.Datatype datatypeRhsNoWithtype)
         | EXCEPTION exndescs   (Spec.Exception (Vector.fromList exndescs))
         | STRUCTURE strdescs   (Spec.Structure (Vector.fromList strdescs))
         | INCLUDE sigexp       (Spec.IncludeSigexp sigexp)
         | INCLUDE sigid sigids (* p. 59 *)
           (Spec.IncludeSigids (Vector.fromList (sigid :: sigids)) )
         | sharespec
           (Spec.Sharing {spec = Spec.makeRegion' (Spec.Empty,
                                                   sharespecleft,
                                                   sharespecright),
                          equations = (Vector.new1
                                       (Equation.makeRegion' (sharespec,
                                                              sharespecleft,
                                                              sharespecright)))})

sharespec : SHARING TYPE longtyconeqns (Equation.Type longtyconeqns)
          | SHARING longstrideqns      (Equation.Structure longstrideqns)

longstrideqns : longstrid EQUALOP longstrid ([longstrid1,longstrid2])
              | longstrid EQUALOP longstrideqns (longstrid :: longstrideqns)

longtyconeqns : longtycon EQUALOP longtycon ([longtycon1,longtycon2])
              | longtycon EQUALOP longtyconeqns (longtycon :: longtyconeqns)

strdescs : strid COLON sigexp' strdescs'  (augment (strid, sigexp', strdescs'))

strdescs' :                             (([], defaultPos, []))
          | AND strdescs                (([], defaultPos, strdescs))
          | WHERE wherespec strdescs''  (cons1 (wherespec, strdescs''))

strdescs'' : strdescs'                 (strdescs')
           | AND wherespec strdescs''  (cons1 (wherespec, strdescs''))

typdescs : typdesc               ([typdesc])
         | typdesc AND typdescs  (typdesc :: typdescs)

typdesc : tyvars tycon ({tyvars = tyvars,
                         tycon = tycon})

valdescs : valdesc                ([valdesc])
         | valdesc AND valdescs   (valdesc :: valdescs)

valdesc : var COLON ty  (Con.ensureSpecify (Vid.toCon (Vid.fromVar var))
                         ; (var, ty))

exndescs : exndesc                ([exndesc])
         | exndesc AND exndescs   (exndesc :: exndescs)

exndesc : con tyOpt  (Con.ensureSpecify con; (con, tyOpt))

tyOpt :         (NONE)
      | OF ty   (SOME ty)

(*---------------------------------------------------*)
(*                     Functors                      *)
(*---------------------------------------------------*)

funbinds : fctid LPAREN fctarg RPAREN sigconst EQUALOP funbinds'
           (let val (strexp,funbinds) = funbinds'
            in {name = fctid,
                arg = FctArg.makeRegion' (fctarg, fctargleft, fctargright),
                result = sigconst,
                body = strexp}
               :: funbinds
            end)

funbinds' : strexp1 funbinds'1  (augment1 (strexp1, funbinds'1))
          | strexp2 funbinds'2  ((strexp2, funbinds'2))

funbinds'1 : funbinds'2                   ([], funbinds'2left, funbinds'2)
           | WHERE wherespec funbinds'1'  (cons1 (wherespec,funbinds'1'))

funbinds'2 :               ([])
           | AND funbinds  (funbinds)

funbinds'1' : funbinds'1                 (funbinds'1)
            | AND wherespec funbinds'1'  (cons1 (wherespec,funbinds'1'))

fctarg : strid COLON sigexp  (FctArg.Structure (strid, sigexp))
       | specs               (FctArg.Spec specs)

(*---------------------------------------------------*)
(*                   Declarations                    *)
(*---------------------------------------------------*)

decs :                  (Dec.makeRegion' (Dec.SeqDec (Vector.new0 ()),
                                          defaultPos, defaultPos))
     | dec decs         (Dec.sequence (dec,decs))
     | SEMICOLON decs   (decs)

dec : decnode (Dec.makeRegion' (decnode, decnodeleft, decnoderight))

decnode : decnolocal              (decnolocal) 
        | LOCAL decs IN decs END  (Dec.Local (decs1,decs2))

decnolocal
        : VAL valbindTop          (Dec.Val {tyvars = Vector.new0 (),
                                            vbs = #1 valbindTop,
                                            rvbs = #2 valbindTop})
        | VAL tyvarseq valbindTop  (Dec.Val {tyvars = tyvarseq,
                                             vbs = #1 valbindTop,
                                             rvbs = #2 valbindTop})
        | FUN funs              (Dec.Fun (Vector.new0 (), Vector.fromList funs))
        | FUN tyvarseq funs     (Dec.Fun (tyvarseq, Vector.fromList funs))
        | TYPE typBind          (Dec.Type typBind)
        | DATATYPE datatypeRhs  (Dec.Datatype datatypeRhs)
        | ABSTYPE datBind WITH decs END   (Dec.Abstype {datBind = datBind,
                                                        body = decs})
        | EXCEPTION ebs
          (Dec.Exception (Vector.fromList ebs))
        | OPEN longstrids       (Dec.Open (Vector.fromList longstrids))
        | fixity vids           (Dec.Fix {fixity = fixity,
                                          ops = Vector.fromList vids})
        | OVERLOAD priority var COLON ty AS longvidands
                                (Dec.Overload (priority, 
                                               var,
                                               Vector.new0 (),
                                               ty,
                                               Vector.fromList longvidands))

valbindTop : valbind (let
                         val (vbs, rvbs) = valbind
                      in
                         (Vector.fromList vbs,
                          Vector.fromList rvbs)
                      end)

valbind : pat EQUALOP exp valbindRest
          (let
              val (vbs, rvbs) = valbindRest
           in
              ({pat = pat, exp = exp} :: vbs,
               rvbs)
           end)
        | REC rvalbind                 (([], rvalbind))


valbindRest :                          (([], []))
            | AND valbind              (valbind)

rvalbind : REC rvalbind                (rvalbind)
         | pat EQUALOP FN match rvalbindRest
            ({pat = pat, match = match} :: rvalbindRest)

rvalbindRest :               ([])
             | AND rvalbind  (rvalbind)

constraint :                    (NONE)
           | COLON ty           (SOME ty)

funs    : clausesTop               ([clausesTop])
        | clausesTop AND funs      (clausesTop :: funs)

clausesTop: clauses (Vector.fromList clauses)

clauses : clause                ([clause])
        | clause BAR clauses    (clause :: clauses)

clause  : apats constraint EQUALOP exp  ({pats = Vector.fromList apats,
                                          resultType = constraint,
                                          body = exp})

typBind : typBind'
          (let
              val typBind = Vector.fromList typBind'
              val b =
                 TypBind.makeRegion'
                 (TypBind.T typBind, typBind'left, typBind'right)
           in
              b
           end)

typBind' : tyvars tycon EQUALOP ty typBind''
           ({def = ty, tycon = tycon, tyvars = tyvars} :: typBind'')

typBind'' :               ([])
          | AND typBind'  (typBind')


tyvars  : tyvarseq (tyvarseq)
        |          (Vector.new0 ())

tyvarseq: tyvar                   (Vector.new1 tyvar)
        | LPAREN tyvar_pc RPAREN
          (let
              val v = Vector.fromList tyvar_pc
              val () =
                 reportDuplicates
                 (v, {equals = Tyvar.sameName,
                      layout = Tyvar.layout,
                      name = "type variable",
                      region = Tyvar.region,
                      term = fn () => Layout.tuple (Vector.toListMap
                                                    (v, Tyvar.layout))})
           in
              v
           end)

tyvar_pc: tyvar                ([tyvar])
        | tyvar COMMA tyvar_pc (tyvar :: tyvar_pc)

constrs : constr                ([constr])
        | constr BAR constrs    (constr :: constrs)

constr  : opcon         (opcon, NONE)
        | opcon OF ty   (opcon, SOME ty)

opcon   : con           (con)
        | OP con        (con)

ebs     : eb              ([eb])
        | eb AND ebs      (eb::ebs)

eb      : opcon ebrhs     (Con.ensureRedefine opcon; (opcon, ebrhs))

ebrhs : ebrhsnode (EbRhs.makeRegion' (ebrhsnode,
                                     ebrhsnodeleft, ebrhsnoderight))

ebrhsnode   :                    (EbRhs.Gen NONE)
            | OF ty              (EbRhs.Gen (SOME ty))
            | EQUALOP longcon    (EbRhs.Def longcon)
            | EQUALOP OP longcon (EbRhs.Def longcon)

fixity  : INFIX                 (Fixity.Infix NONE)
        | INFIX digit           (Fixity.Infix (SOME digit))
        | INFIXR                (Fixity.Infixr NONE)
        | INFIXR digit          (Fixity.Infixr (SOME digit))
        | NONFIX                (Fixity.Nonfix)

priority :                      (Priority.T NONE)
         | digit                (Priority.T (SOME digit))

int : INT
   (let
       val {digits, negate, radix} = INT
    in
       case StringCvt.scanString (fn r => IntInf.scan (radix, r)) digits of
          NONE => Error.bug "parser saw invalid int"
        | SOME i => if negate then ~ i else i
    end)

word : WORD
   (let
       val {digits, radix} = WORD
    in
       case StringCvt.scanString (fn r => IntInf.scan (radix, r)) digits of
          NONE => Error.bug "parser saw invalid word"
        | SOME i => i
    end)

digit : INT
   (let
       val {digits, negate, radix} = INT
    in
       if 1 = String.size digits andalso not negate andalso radix = StringCvt.DEC
          then valOf (Int.fromString digits)
       else let
               open Layout
               val _ = 
                  Control.error (reg (INTleft, INTright),
                                 str "invalid digit in infix declaration",
                                 empty)
            in
               0
            end
    end)

datatypeRhs
   : datatypeRhsnode
     (DatatypeRhs.makeRegion' (datatypeRhsnode,
                               datatypeRhsnodeleft, datatypeRhsnoderight))

datatypeRhsNoWithtype
   : datatypeRhsnodeNoWithtype
     (DatatypeRhs.makeRegion' (datatypeRhsnodeNoWithtype,
                               datatypeRhsnodeNoWithtypeleft,
                               datatypeRhsnodeNoWithtyperight))

datatypeRhsnode
   : repl              (repl)
   | datBind           (DatatypeRhs.DatBind datBind)

datatypeRhsnodeNoWithtype
   : repl               (repl)
   | datBindNoWithtype  (DatatypeRhs.DatBind datBindNoWithtype)

repl : tyvars tycon EQUALOP DATATYPE longtycon
       (if Vector.isEmpty tyvars
           then ()
        else error (reg (tyvarsleft, tyvarsright),
                    "nonempty tyvars in datatype repl")
        ; DatatypeRhs.Repl {lhs = tycon, rhs = longtycon})

datBind
   : dbs withtypes
     (DatBind.make (dbs, withtypes, dbsleft, withtypesright))

datBindNoWithtype
   : dbs
     (DatBind.make (dbs, TypBind.empty, dbsleft, dbsright))

dbs : dbs' (Vector.fromList dbs')

dbs'
   : db
     ([db])
   | db AND dbs'
     (db :: dbs')

db : tyvars tycon EQUALOP constrs
     ({cons = Vector.fromList constrs,
       tycon = tycon,
       tyvars = tyvars})

withtypes
   :
     (TypBind.empty)
   | WITHTYPE typBind
     (typBind)

longvidands : longvid  ([longvid])
            | longvid AND longvidands (longvid :: longvidands)

match : rules           (Match.makeRegion' (Match.T (Vector.fromList rules),
                                            rulesleft, rulesright))

rules : rule            ([rule])
      | rule BAR rules  (rule :: rules)

rule    : pat DARROW exp        ((pat,exp))

elabel  : field EQUALOP exp     (field,exp)

elabels : elabel COMMA elabels  (elabel :: elabels)
        | elabel                ([elabel])

exp_ps  : exp SEMICOLON exp     ([exp1, exp2])
        | exp SEMICOLON exp_ps  (exp :: exp_ps)

exp : expnode (Exp.makeRegion' (expnode, expnodeleft, expnoderight))

expnode : exp HANDLE match      (Exp.Handle (exp, match))
        | exp ORELSE exp        (Exp.Orelse (exp1, exp2))
        | exp ANDALSO exp       (Exp.Andalso (exp1, exp2))
        | exp COLON ty          (Exp.Constraint (exp, ty))
        | app_exp               (Exp.FlatApp (Vector.fromList app_exp))
        | FN match              (Exp.Fn match)
        | CASE exp OF match     (Exp.Case (exp, match))
        | WHILE exp DO exp      (Exp.While {test = exp1, expr = exp2})
        | IF exp THEN exp ELSE exp (Exp.If (exp1, exp2, exp3))
        | RAISE exp             (Exp.Raise exp)

app_exp : aexp app_exp1     (Exp.makeRegion' (aexp, aexpleft, aexpright)
                             :: app_exp1)
        | longvid app_exp1  (Exp.makeRegion' (Exp.Var {name = longvid,
                                                       fixop = Fixop.None},
                                             longvidleft, longvidright)
                             :: app_exp1)

app_exp1 :         ([])
         | app_exp (app_exp)

aexp    : OP longvid            (Exp.Var {name = longvid,
                                          fixop = Fixop.Op})
        | const                 (Exp.Const const)
        | HASH field            (Exp.Selector field)
        | LBRACE elabels RBRACE
          (Exp.Record (Record.fromVector (Vector.fromList elabels)))
        | LBRACE RBRACE         (Exp.unit)
        | LPAREN RPAREN         (Exp.unit)
        | LPAREN expnode RPAREN (expnode)
        | LPAREN exp_ps RPAREN  (Exp.Seq (Vector.fromList exp_ps))
        | LPAREN exp_2c RPAREN  (Exp.tuple (Vector.fromList exp_2c))
        | LBRACKET exp_list RBRACKET  (Exp.List (Vector.fromList exp_list))
        | LBRACKET RBRACKET           (Exp.List (Vector.new0 ()))
        | LET decs IN exp END   (Exp.Let (decs, exp))
        | LET decs IN exp_ps END
            (Exp.Let (decs, Exp.makeRegion' (Exp.Seq (Vector.fromList exp_ps),
                                             exp_psleft,
                                             exp_psright)))
        | ADDRESS string symattributes COLON ty SEMICOLON
          (Exp.Prim (PrimKind.Address {attributes = symattributes,
                                       name = string,
                                       ty = ty}))
        | BUILD_CONST string COLON ty SEMICOLON
          (Exp.Prim (PrimKind.BuildConst {name = string, ty = ty}))
        | COMMAND_LINE_CONST string COLON ty EQUALOP constOrBool SEMICOLON
          (Exp.Prim (PrimKind.CommandLineConst {name = string,
                                                ty = ty,
                                                value = constOrBool}))
        | CONST string COLON ty SEMICOLON
          (Exp.Prim (PrimKind.Const {name = string, ty = ty}))
        | EXPORT string ieattributes COLON ty SEMICOLON
          (Exp.Prim (PrimKind.Export {attributes = ieattributes,
                                      name = string,
                                      ty = ty}))
        | IMPORT string ieattributes COLON ty SEMICOLON
          (Exp.Prim (PrimKind.Import {attributes = ieattributes,
                                      name = string,
                                      ty = ty}))
        | IMPORT ASTERISK ieattributes COLON ty SEMICOLON
          (Exp.Prim (PrimKind.IImport {attributes = ieattributes,
                                       ty = ty}))
        | PRIM string COLON ty SEMICOLON
          (Exp.Prim (PrimKind.Prim {name = string,
                                    ty = ty}))
        | SYMBOL string symattributes COLON ty SEMICOLON
          (Exp.Prim (PrimKind.Symbol {attributes = symattributes,
                                      name = string,
                                      ty = ty}))
        | SYMBOL ASTERISK COLON ty SEMICOLON
          (Exp.Prim (PrimKind.ISymbol {ty = ty}))

ieattributes
   :
     ([])
   | id ieattributes
     (let
         val id = Symbol.toString (#1 id)
      in
         case id of
            "cdecl" => PrimKind.ImportExportAttribute.Cdecl :: ieattributes
          | "external" => PrimKind.ImportExportAttribute.External :: ieattributes
          | "private" => PrimKind.ImportExportAttribute.Private :: ieattributes
          | "public" => PrimKind.ImportExportAttribute.Public :: ieattributes
          | "stdcall" => PrimKind.ImportExportAttribute.Stdcall :: ieattributes
          | _ => (error (reg (idleft, idright), concat ["invalid attribute: ", id])
                  ; ieattributes)
      end)

symattributes
   :
     ([])
   | id symattributes
     (let
         val id = Symbol.toString (#1 id)
      in
         case id of
            "alloc" => PrimKind.SymbolAttribute.Alloc :: symattributes
          | "external" => PrimKind.SymbolAttribute.External :: symattributes
          | "private" => PrimKind.SymbolAttribute.Private :: symattributes
          | "public" => PrimKind.SymbolAttribute.Public :: symattributes
          | _ => (error (reg (idleft, idright), concat ["invalid attribute: ", id])
                  ; symattributes)
      end)

exp_2c  : exp COMMA exp_2c      (exp :: exp_2c)
        | exp COMMA exp         ([exp1, exp2])

exp_list : exp                  ([exp])
         | exp COMMA exp_list   (exp :: exp_list)

(*---------------------------------------------------*)
(*                     Patterns                      *)
(*---------------------------------------------------*)

pat : patnode (Pat.makeRegion' (patnode, patnodeleft, patnoderight))

patnode : pat AS pat    (Pat.makeAs (pat1, pat2))
        | pat COLON ty  (Pat.Constraint (pat, ty))
        | apats         (Pat.FlatApp (Vector.fromList apats))

apats   : apat                  ([apat])
        | apat apats            (apat :: apats)

apat : apatnode (Pat.makeRegion' (apatnode, apatnodeleft, apatnoderight))

apatnode : longvidNoEqual        (Pat.Var {name = longvidNoEqual,
                                           fixop = Fixop.None})
        | OP longvid             (Pat.Var {name = longvid,
                                           fixop = Fixop.Op})
        | const
          (let
              val _ =
                 case Const.node const of
                    Const.Real r =>
                       let
                          open Layout
                       in
                          Control.error
                          (Const.region const,
                           seq [str "real constants are not allowed in patterns: ",
                                Const.layout const],
                           empty)
                       end
                    | _ => ()
           in
              Pat.Const const
           end)
        | WILD                   (Pat.Wild)
        | LPAREN pats RPAREN     (Pat.tuple (Vector.fromList pats))
        | LBRACKET pats RBRACKET (Pat.List (Vector.fromList pats))
        | LBRACE RBRACE          (Pat.unit)
        | LBRACE patitems RBRACE
          (let
              val (items, flexible) = patitems
           in
              Pat.Record {flexible = flexible,
                          items = Vector.fromList items}
           end)

pats: ([])
    | pat commapats (pat :: commapats)

commapats : ([])
          | COMMA pat commapats (pat :: commapats)

patitems : patitem COMMA patitems  (let val (items, f) = patitems
                                    in (patitem :: items, f)
                                    end)
         | patitem              ([patitem], false)
         | DOTDOTDOT            ([], true)

patitem
   : field EQUALOP pat
     ((field, Pat.Item.Field pat))
   | vidNoEqual constraint opaspat
     (Field.Symbol (Vid.toSymbol vidNoEqual),
      Pat.Item.Vid (vidNoEqual, constraint, opaspat))

opaspat :         (NONE)
        | AS pat  (SOME pat)

(*---------------------------------------------------*)
(*                       Types                       *)
(*---------------------------------------------------*)

ty : tynode (Type.makeRegion' (tynode, tynodeleft, tynoderight))

tynode  : tuple_ty      (Type.tuple (Vector.fromList tuple_ty))
        | ty ARROW ty   (Type.arrow (ty1, ty2))
        | ty'node       (ty'node)

ty' : ty'node (Type.makeRegion' (ty'node, ty'nodeleft, ty'noderight))

ty'node : tyvar                           (Type.Var tyvar)
        | LBRACE tlabels RBRACE
          (Type.Record (Srecord.fromVector (Vector.fromList tlabels)))
        | LBRACE RBRACE                   (Type.unit)
        | LPAREN ty0_pc RPAREN longtycon  (Type.Con (longtycon,
                                                     Vector.fromList ty0_pc))
        | LPAREN ty RPAREN                (Type.node ty)
        | ty' longtycon                   (Type.Con (longtycon,
                                                     Vector.new1 ty'))
        | longtycon                       (Type.Con (longtycon,
                                                     Vector.new0 ()))

tlabel  : field COLON ty        (field, ty)

tlabels : tlabel COMMA tlabels  (tlabel :: tlabels)
        | tlabel                ([tlabel])

tuple_ty : ty' ASTERISK tuple_ty        (ty' :: tuple_ty)
         | ty' ASTERISK ty'             ([ty'1, ty'2])

ty0_pc  : ty COMMA ty           ([ty1, ty2])
        | ty COMMA ty0_pc       (ty :: ty0_pc)

(*---------------------------------------------------*)
(*                       Atoms                       *)
(*---------------------------------------------------*)

constOrBool
   : const (const)
   | id (let
            fun ok b = Const.makeRegion (Const.Bool b, reg (idleft, idright))
         in            
            case Symbol.toString (#1 id) of
               "false" => ok false
             | "true" => ok true
             | s => (error (#2 id, concat ["unknown boolean constant: ", s])
                     ; ok false)
         end)

const   : const'                (Const.makeRegion
                                 (const', reg (const'left, const'right)))

const'  : int                   (Const.Int int)
        | word                  (Const.Word word)
        | REAL                  (Const.Real REAL)
        | STRING                (Const.String STRING)
        | CHAR                  (Const.Char CHAR)

string : STRING  (CharVector.tabulate
                  (Vector.length STRING, fn i =>
                   Char.fromInt ((Vector.sub (STRING, i)))))

idNoAsterisk : longidNoAsterisk (ensureNonqualified longidNoAsterisk)

id : idNoAsterisk  (idNoAsterisk)
   | ASTERISK      ((Symbol.asterisk, reg (ASTERISKleft, ASTERISKright)))

idEqual : id      (id)
        | EQUALOP ((Symbol.equal, reg (EQUALOPleft, EQUALOPright)))

longid
   : longidNoAsterisk (longidNoAsterisk)
   | ASTERISK  (([Symbol.asterisk], reg (ASTERISKleft, ASTERISKright)))

longidNoAsterisk
   : LONGID
     (let
         val syms = List.map (String.split (LONGID, #"."), Symbol.fromString)
      in
         (syms, reg (LONGIDleft, LONGIDright))
      end)

longidEqual : longid   (longid)
            | EQUALOP  (([Symbol.equal], reg (EQUALOPleft, EQUALOPright)))

vid : idEqual                  (Vid.fromSymbol idEqual)
vidNoEqual : id                (Vid.fromSymbol id)
vids : vid                     ([vid])
     | vid vids                (vid::vids)
var : idEqual                  (Var.fromSymbol idEqual)
con : id                       (Con.fromSymbol id)
tycon : idNoAsterisk           (Tycon.fromSymbol idNoAsterisk)
tyvar : TYVAR                  (Tyvar.newString (TYVAR, {left = TYVARleft,
                                                         right = TYVARright}))
field : id                     (Field.Symbol (#1 id))
      | int                    (let
                                   val int =
                                      IntInf.toInt int
                                      handle Exn.Overflow =>
                                         (error (reg (intleft, intright),
                                                 "field too huge")
                                          ; 0)
                                in
                                   Field.Int
                                   (if int <= 0
                                       then (error (reg (intleft, intright),
                                                    "nonpositive field")
                                             ; ~1)
                                    else
                                       int - 1)
                                end) (* int - 1 because fields are 0-based *)

strid : id                     (Strid.fromSymbol id)
sigid : id                     (Sigid.fromSymbol id)
sigids : sigid                 ([sigid])
       | sigid sigids          (sigid :: sigids)
fctid : id                     (Fctid.fromSymbol id)

longtycon : longidNoAsterisk (Longtycon.fromSymbols longidNoAsterisk)
longvid : longidEqual      (Longvid.fromSymbols longidEqual)
longvidNoEqual : longid    (Longvid.fromSymbols longid)
longcon : longid           (Longcon.fromSymbols longid)
longstrid : longid         (Longstrid.fromSymbols longid)

longstrids : longstrid             ([longstrid])
           | longstrid longstrids  (longstrid :: longstrids)
