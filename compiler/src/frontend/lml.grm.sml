functor LmlLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Lml_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* LML - "Little ML" *)
(* This is a really crude grammar for a subset of SML97 *)
(* Copyright (c) 2008 Gian Perrone *)
(* gdp3 at cs.waikato.ac.nz *)

(* TODO: Add records *)

structure A = Absyn

(* Construct a value binding with an anonymous function *)
fun mkFun (id,e1,e2,el) = A.ValBinding ((id,NONE), A.AnonFn ((e1,e2) :: el))


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\174\000\003\000\174\000\005\000\174\000\006\000\039\000\
\\009\000\038\000\010\000\174\000\011\000\174\000\012\000\037\000\
\\013\000\036\000\015\000\174\000\016\000\035\000\018\000\174\000\
\\019\000\034\000\024\000\033\000\028\000\064\000\029\000\063\000\
\\030\000\062\000\031\000\061\000\032\000\088\000\033\000\059\000\
\\035\000\058\000\037\000\057\000\038\000\056\000\039\000\055\000\
\\040\000\054\000\041\000\032\000\044\000\031\000\045\000\030\000\
\\046\000\122\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\
\\060\000\174\000\000\000\
\\001\000\001\000\181\000\003\000\181\000\005\000\181\000\006\000\039\000\
\\007\000\181\000\008\000\181\000\009\000\038\000\010\000\181\000\
\\011\000\181\000\012\000\037\000\013\000\036\000\015\000\181\000\
\\016\000\035\000\017\000\181\000\018\000\181\000\019\000\034\000\
\\024\000\033\000\028\000\064\000\029\000\063\000\030\000\062\000\
\\031\000\061\000\032\000\088\000\033\000\059\000\034\000\181\000\
\\035\000\058\000\037\000\057\000\038\000\056\000\039\000\055\000\
\\040\000\054\000\041\000\032\000\044\000\031\000\045\000\030\000\
\\046\000\139\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\050\000\181\000\053\000\027\000\054\000\181\000\055\000\052\000\
\\056\000\181\000\057\000\051\000\058\000\026\000\060\000\181\000\000\000\
\\001\000\001\000\013\000\003\000\012\000\005\000\011\000\010\000\010\000\
\\011\000\009\000\015\000\008\000\060\000\007\000\000\000\
\\001\000\002\000\078\000\000\000\
\\001\000\004\000\077\000\000\000\
\\001\000\006\000\039\000\007\000\109\000\009\000\038\000\012\000\037\000\
\\013\000\036\000\016\000\035\000\019\000\034\000\024\000\033\000\
\\028\000\064\000\029\000\063\000\030\000\062\000\031\000\061\000\
\\032\000\088\000\033\000\059\000\035\000\058\000\037\000\057\000\
\\038\000\056\000\039\000\055\000\040\000\054\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\047\000\053\000\048\000\029\000\
\\049\000\028\000\053\000\027\000\055\000\052\000\057\000\051\000\
\\058\000\026\000\000\000\
\\001\000\006\000\039\000\008\000\141\000\009\000\038\000\012\000\037\000\
\\013\000\036\000\016\000\035\000\019\000\034\000\024\000\033\000\
\\028\000\064\000\029\000\063\000\030\000\062\000\031\000\061\000\
\\032\000\088\000\033\000\059\000\035\000\058\000\037\000\057\000\
\\038\000\056\000\039\000\055\000\040\000\054\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\047\000\053\000\048\000\029\000\
\\049\000\028\000\053\000\027\000\055\000\052\000\057\000\051\000\
\\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\017\000\140\000\019\000\034\000\024\000\033\000\
\\028\000\064\000\029\000\063\000\030\000\062\000\031\000\061\000\
\\032\000\088\000\033\000\059\000\035\000\058\000\037\000\057\000\
\\038\000\056\000\039\000\055\000\040\000\054\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\047\000\053\000\048\000\029\000\
\\049\000\028\000\053\000\027\000\055\000\052\000\057\000\051\000\
\\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\060\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\034\000\107\000\035\000\058\000\037\000\057\000\
\\038\000\056\000\039\000\055\000\040\000\054\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\047\000\053\000\048\000\029\000\
\\049\000\028\000\053\000\027\000\055\000\052\000\057\000\051\000\
\\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\050\000\106\000\053\000\027\000\055\000\052\000\056\000\104\000\
\\057\000\051\000\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\056\000\104\000\057\000\051\000\
\\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\153\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\154\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\048\000\029\000\049\000\028\000\
\\050\000\070\000\053\000\027\000\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\054\000\067\000\058\000\026\000\000\000\
\\001\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\041\000\032\000\
\\044\000\031\000\045\000\030\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\058\000\026\000\000\000\
\\001\000\018\000\128\000\000\000\
\\001\000\018\000\129\000\000\000\
\\001\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\050\000\117\000\000\000\
\\001\000\022\000\135\000\023\000\134\000\024\000\133\000\025\000\132\000\
\\026\000\131\000\036\000\130\000\000\000\
\\001\000\023\000\134\000\024\000\133\000\025\000\132\000\026\000\131\000\
\\036\000\130\000\050\000\148\000\000\000\
\\001\000\032\000\022\000\000\000\
\\001\000\032\000\023\000\000\000\
\\001\000\032\000\040\000\000\000\
\\001\000\032\000\041\000\000\000\
\\001\000\032\000\042\000\000\000\
\\001\000\032\000\108\000\000\000\
\\001\000\048\000\015\000\000\000\
\\001\000\048\000\016\000\000\000\
\\001\000\048\000\017\000\000\000\
\\001\000\048\000\018\000\000\000\
\\001\000\048\000\019\000\000\000\
\\001\000\048\000\021\000\000\000\
\\001\000\048\000\021\000\049\000\116\000\000\000\
\\001\000\048\000\046\000\049\000\045\000\000\000\
\\001\000\048\000\049\000\000\000\
\\001\000\048\000\075\000\000\000\
\\001\000\048\000\137\000\000\000\
\\001\000\050\000\105\000\000\000\
\\001\000\054\000\103\000\000\000\
\\001\000\060\000\000\000\000\000\
\\160\000\000\000\
\\161\000\001\000\013\000\003\000\012\000\005\000\011\000\010\000\010\000\
\\011\000\009\000\015\000\008\000\060\000\007\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\165\000\047\000\043\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\169\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\000\000\
\\173\000\000\000\
\\175\000\000\000\
\\176\000\000\000\
\\177\000\046\000\086\000\000\000\
\\178\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\179\000\014\000\087\000\000\000\
\\180\000\000\000\
\\181\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\046\000\139\000\047\000\053\000\048\000\029\000\
\\049\000\028\000\053\000\027\000\055\000\052\000\057\000\051\000\
\\058\000\026\000\000\000\
\\182\000\000\000\
\\183\000\000\000\
\\184\000\000\000\
\\185\000\000\000\
\\186\000\000\000\
\\187\000\000\000\
\\188\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\189\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\190\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\191\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\192\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\193\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\194\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\195\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\196\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\197\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\198\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\199\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\200\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\201\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\202\000\000\000\
\\203\000\000\000\
\\204\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\205\000\000\000\
\\206\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\207\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\208\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\209\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\210\000\000\000\
\\211\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\214\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\057\000\051\000\058\000\026\000\000\000\
\\215\000\000\000\
\\216\000\006\000\039\000\009\000\038\000\012\000\037\000\013\000\036\000\
\\016\000\035\000\019\000\034\000\024\000\033\000\028\000\064\000\
\\029\000\063\000\030\000\062\000\031\000\061\000\032\000\088\000\
\\033\000\059\000\035\000\058\000\037\000\057\000\038\000\056\000\
\\039\000\055\000\040\000\054\000\041\000\032\000\044\000\031\000\
\\045\000\030\000\047\000\053\000\048\000\029\000\049\000\028\000\
\\053\000\027\000\055\000\052\000\056\000\104\000\057\000\051\000\
\\058\000\026\000\000\000\
\\217\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\218\000\000\000\
\\219\000\000\000\
\\220\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\221\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\222\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\223\000\000\000\
\\224\000\023\000\134\000\024\000\133\000\025\000\132\000\026\000\131\000\
\\036\000\130\000\000\000\
\\225\000\023\000\134\000\024\000\133\000\025\000\132\000\026\000\131\000\
\\036\000\130\000\000\000\
\\226\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\227\000\021\000\084\000\030\000\083\000\036\000\082\000\048\000\046\000\
\\049\000\045\000\000\000\
\\228\000\023\000\134\000\024\000\133\000\025\000\132\000\026\000\131\000\
\\036\000\130\000\000\000\
\\229\000\000\000\
\"
val actionRowNumbers =
"\002\000\053\000\052\000\043\000\
\\042\000\045\000\028\000\029\000\
\\030\000\031\000\032\000\033\000\
\\044\000\022\000\023\000\016\000\
\\024\000\025\000\026\000\047\000\
\\035\000\036\000\008\000\067\000\
\\065\000\015\000\014\000\068\000\
\\016\000\016\000\016\000\016\000\
\\064\000\037\000\084\000\083\000\
\\066\000\016\000\004\000\003\000\
\\016\000\035\000\051\000\035\000\
\\100\000\058\000\056\000\060\000\
\\095\000\016\000\016\000\035\000\
\\016\000\016\000\016\000\016\000\
\\016\000\016\000\016\000\016\000\
\\016\000\016\000\016\000\040\000\
\\011\000\093\000\039\000\010\000\
\\091\000\070\000\085\000\009\000\
\\069\000\027\000\005\000\002\000\
\\002\000\050\000\046\000\098\000\
\\035\000\035\000\034\000\019\000\
\\036\000\035\000\016\000\089\000\
\\071\000\090\000\080\000\079\000\
\\078\000\077\000\082\000\081\000\
\\000\000\075\000\074\000\073\000\
\\072\000\094\000\016\000\092\000\
\\086\000\016\000\016\000\016\000\
\\017\000\018\000\101\000\102\000\
\\020\000\104\000\034\000\099\000\
\\057\000\059\000\076\000\054\000\
\\038\000\096\000\097\000\062\000\
\\007\000\006\000\049\000\048\000\
\\034\000\034\000\034\000\035\000\
\\035\000\035\000\021\000\016\000\
\\063\000\016\000\016\000\016\000\
\\109\000\105\000\106\000\107\000\
\\108\000\103\000\110\000\012\000\
\\013\000\088\000\087\000\016\000\
\\016\000\000\000\001\000\055\000\
\\061\000\041\000"
val gotoT =
"\
\\001\000\157\000\002\000\004\000\004\000\003\000\005\000\002\000\
\\011\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\012\000\004\000\003\000\005\000\002\000\011\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\018\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\022\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\042\000\000\000\
\\009\000\046\000\010\000\045\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\064\000\013\000\063\000\000\000\
\\008\000\023\000\012\000\067\000\013\000\066\000\000\000\
\\000\000\
\\008\000\023\000\012\000\069\000\000\000\
\\008\000\023\000\012\000\070\000\000\000\
\\008\000\023\000\012\000\071\000\000\000\
\\008\000\023\000\012\000\072\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\074\000\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\077\000\000\000\
\\014\000\078\000\000\000\
\\014\000\079\000\000\000\
\\014\000\083\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\087\000\000\000\
\\008\000\023\000\012\000\088\000\000\000\
\\014\000\089\000\000\000\
\\008\000\023\000\012\000\090\000\000\000\
\\008\000\023\000\012\000\091\000\000\000\
\\008\000\023\000\012\000\092\000\000\000\
\\008\000\023\000\012\000\093\000\000\000\
\\008\000\023\000\012\000\094\000\000\000\
\\008\000\023\000\012\000\095\000\000\000\
\\008\000\023\000\012\000\096\000\000\000\
\\008\000\023\000\012\000\097\000\000\000\
\\008\000\023\000\012\000\098\000\000\000\
\\008\000\023\000\012\000\099\000\000\000\
\\008\000\023\000\012\000\100\000\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\002\000\108\000\004\000\003\000\005\000\002\000\011\000\001\000\000\000\
\\002\000\109\000\004\000\003\000\005\000\002\000\011\000\001\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\014\000\079\000\000\000\
\\014\000\079\000\000\000\
\\014\000\110\000\000\000\
\\014\000\111\000\000\000\
\\003\000\113\000\015\000\112\000\000\000\
\\014\000\079\000\000\000\
\\009\000\116\000\010\000\045\000\000\000\
\\014\000\117\000\000\000\
\\008\000\023\000\012\000\118\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\014\000\079\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\006\000\119\000\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\008\000\023\000\012\000\122\000\013\000\121\000\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\123\000\000\000\
\\008\000\023\000\012\000\124\000\000\000\
\\008\000\023\000\012\000\125\000\000\000\
\\000\000\
\\000\000\
\\014\000\079\000\000\000\
\\014\000\079\000\000\000\
\\000\000\
\\000\000\
\\003\000\113\000\015\000\134\000\000\000\
\\000\000\
\\000\000\
\\014\000\079\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\007\000\136\000\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\000\000\
\\003\000\113\000\015\000\140\000\000\000\
\\003\000\113\000\015\000\141\000\000\000\
\\003\000\113\000\015\000\142\000\000\000\
\\014\000\143\000\000\000\
\\014\000\144\000\000\000\
\\014\000\145\000\000\000\
\\000\000\
\\008\000\023\000\012\000\147\000\000\000\
\\000\000\
\\008\000\023\000\012\000\148\000\000\000\
\\008\000\023\000\012\000\149\000\000\000\
\\008\000\023\000\012\000\150\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\079\000\000\000\
\\014\000\079\000\000\000\
\\014\000\079\000\000\000\
\\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\048\000\000\000\
\\008\000\023\000\012\000\153\000\000\000\
\\008\000\023\000\012\000\154\000\000\000\
\\006\000\155\000\008\000\023\000\012\000\048\000\000\000\
\\007\000\156\000\008\000\023\000\012\000\048\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 158
val numrules = 70
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | LSTR of unit ->  (string) | IDENT of unit ->  (string)
 | LREAL of unit ->  (real) | LINT of unit ->  (int)
 | behavty of unit ->  (A.behavty) | typeexpr of unit ->  (A.ty)
 | tupleexpr of unit ->  (A.expr list) | expr of unit ->  (A.expr)
 | datatypestm of unit ->  (A.stm)
 | dtclause of unit ->  (string*A.ty option)
 | dtclauses of unit ->  ( ( string * A.ty option )  list)
 | anonfnexpr of unit ->  (A.expr)
 | anonfnclause of unit ->  ( ( A.expr * A.expr )  list)
 | funclause of unit ->  ( ( A.expr * A.expr )  list)
 | funstm of unit ->  (A.stm) | stm of unit ->  (A.stm)
 | idwithtype of unit ->  (A.identifier)
 | stmlist of unit ->  (A.stm list) | prog of unit ->  (A.stm list)
end
type svalue = MlyValue.svalue
type result = A.stm list
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 59) => true | _ => false
val showTerminal =
fn (T 0) => "VAL"
  | (T 1) => "STRUCT"
  | (T 2) => "STRUCTURE"
  | (T 3) => "SIG"
  | (T 4) => "SIGNATURE"
  | (T 5) => "IF"
  | (T 6) => "THEN"
  | (T 7) => "ELSE"
  | (T 8) => "NIL"
  | (T 9) => "FUN"
  | (T 10) => "DATATYPE"
  | (T 11) => "TRUE"
  | (T 12) => "FALSE"
  | (T 13) => "OF"
  | (T 14) => "TYPE"
  | (T 15) => "LET"
  | (T 16) => "IN"
  | (T 17) => "END"
  | (T 18) => "LINT"
  | (T 19) => "LREAL"
  | (T 20) => "BTYPESTART"
  | (T 21) => "BTYPEEND"
  | (T 22) => "BTYPERECV"
  | (T 23) => "BANG"
  | (T 24) => "BTYPECOMP"
  | (T 25) => "BTYPECHOICE"
  | (T 26) => "ASCRIBEO"
  | (T 27) => "PLUS"
  | (T 28) => "MINUS"
  | (T 29) => "TIMES"
  | (T 30) => "DIVIDE"
  | (T 31) => "EQUALS"
  | (T 32) => "NEQ"
  | (T 33) => "FNASSIGN"
  | (T 34) => "MUTASSIGN"
  | (T 35) => "ARROW"
  | (T 36) => "LTEQ"
  | (T 37) => "GTEQ"
  | (T 38) => "LT"
  | (T 39) => "GT"
  | (T 40) => "FN"
  | (T 41) => "BAND"
  | (T 42) => "BOR"
  | (T 43) => "BNOT"
  | (T 44) => "UMINUS"
  | (T 45) => "CLAUSE"
  | (T 46) => "TYPEDELIM"
  | (T 47) => "IDENT"
  | (T 48) => "LPAR"
  | (T 49) => "RPAR"
  | (T 50) => "LBR"
  | (T 51) => "RBR"
  | (T 52) => "LSQ"
  | (T 53) => "RSQ"
  | (T 54) => "CONS"
  | (T 55) => "COMMA"
  | (T 56) => "SEMI"
  | (T 57) => "LSTR"
  | (T 58) => "ERROR"
  | (T 59) => "EOF"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 59) $$ (T 58) $$ (T 56) $$ (T 55) $$ (T 54) $$ (T 53) $$ (T 52)
 $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 48) $$ (T 46) $$ (T 45) $$ (T 44)
 $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37)
 $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30)
 $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23)
 $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14)
 $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7)
 $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
type int = Int.int
exception mlyAction of int
local open Header in
val actions = 
fn (i392:int,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.stmlist stmlist1, stmlist1left, 
stmlist1right)) :: rest671)) => let val  result = MlyValue.prog (fn _
 => let val  (stmlist as stmlist1) = stmlist1 ()
 in (stmlist)
end)
 in ( LrTable.NT 0, ( result, stmlist1left, stmlist1right), rest671)

end
|  ( 1, ( ( _, ( MlyValue.stm stm1, stm1left, stm1right)) :: rest671))
 => let val  result = MlyValue.stmlist (fn _ => let val  (stm as stm1)
 = stm1 ()
 in ([stm])
end)
 in ( LrTable.NT 1, ( result, stm1left, stm1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.stmlist stmlist1, _, stmlist1right)) :: ( _,
 ( MlyValue.stm stm1, stm1left, _)) :: rest671)) => let val  result = 
MlyValue.stmlist (fn _ => let val  (stm as stm1) = stm1 ()
 val  (stmlist as stmlist1) = stmlist1 ()
 in (stm :: stmlist)
end)
 in ( LrTable.NT 1, ( result, stm1left, stmlist1right), rest671)
end
|  ( 3, ( ( _, ( _, EOF1left, EOF1right)) :: rest671)) => let val  
result = MlyValue.stmlist (fn _ => ([]))
 in ( LrTable.NT 1, ( result, EOF1left, EOF1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.typeexpr typeexpr1, _, typeexpr1right)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, IDENT1left, _)) :: rest671)) => let
 val  result = MlyValue.idwithtype (fn _ => let val  (IDENT as IDENT1)
 = IDENT1 ()
 val  (typeexpr as typeexpr1) = typeexpr1 ()
 in ((IDENT,SOME typeexpr))
end)
 in ( LrTable.NT 2, ( result, IDENT1left, typeexpr1right), rest671)

end
|  ( 5, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.idwithtype (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 in ((IDENT,NONE))
end)
 in ( LrTable.NT 2, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 6, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.stmlist stmlist1
, _, _)) :: _ :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _
, STRUCTURE1left, _)) :: rest671)) => let val  result = MlyValue.stm
 (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 val  (stmlist as stmlist1) = stmlist1 ()
 in (A.StructBinding(IDENT,stmlist))
end)
 in ( LrTable.NT 3, ( result, STRUCTURE1left, END1right), rest671)
end
|  ( 7, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.stmlist stmlist1
, _, _)) :: _ :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _
, SIGNATURE1left, _)) :: rest671)) => let val  result = MlyValue.stm
 (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 val  (stmlist as stmlist1) = stmlist1 ()
 in (A.SigBinding(IDENT,stmlist))
end)
 in ( LrTable.NT 3, ( result, SIGNATURE1left, END1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.expr expr1, _, expr1right)) :: _ :: ( _, ( 
MlyValue.idwithtype idwithtype1, _, _)) :: ( _, ( _, VAL1left, _)) :: 
rest671)) => let val  result = MlyValue.stm (fn _ => let val  (
idwithtype as idwithtype1) = idwithtype1 ()
 val  (expr as expr1) = expr1 ()
 in (A.ValBinding(idwithtype,expr))
end)
 in ( LrTable.NT 3, ( result, VAL1left, expr1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.typeexpr typeexpr1, _, typeexpr1right)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, TYPE1left, _))
 :: rest671)) => let val  result = MlyValue.stm (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 val  (typeexpr as typeexpr1) = typeexpr1 ()
 in (A.TyBinding(IDENT,typeexpr))
end)
 in ( LrTable.NT 3, ( result, TYPE1left, typeexpr1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.funstm funstm1, funstm1left, funstm1right))
 :: rest671)) => let val  result = MlyValue.stm (fn _ => let val  (
funstm as funstm1) = funstm1 ()
 in (funstm)
end)
 in ( LrTable.NT 3, ( result, funstm1left, funstm1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.datatypestm datatypestm1, datatypestm1left,
 datatypestm1right)) :: rest671)) => let val  result = MlyValue.stm
 (fn _ => let val  (datatypestm as datatypestm1) = datatypestm1 ()
 in (datatypestm)
end)
 in ( LrTable.NT 3, ( result, datatypestm1left, datatypestm1right), 
rest671)
end
|  ( 12, ( ( _, ( MlyValue.funclause funclause1, _, funclause1right))
 :: ( _, ( MlyValue.expr expr2, _, _)) :: _ :: ( _, ( MlyValue.expr 
expr1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
FUN1left, _)) :: rest671)) => let val  result = MlyValue.funstm (fn _
 => let val  (IDENT as IDENT1) = IDENT1 ()
 val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 val  (funclause as funclause1) = funclause1 ()
 in (mkFun (IDENT, expr1, expr2, funclause))
end)
 in ( LrTable.NT 4, ( result, FUN1left, funclause1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.funclause funclause1, _, funclause1right))
 :: ( _, ( MlyValue.expr expr2, _, _)) :: _ :: ( _, ( MlyValue.expr 
expr1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
CLAUSE1left, _)) :: rest671)) => let val  result = MlyValue.funclause
 (fn _ => let val  IDENT1 = IDENT1 ()
 val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 val  (funclause as funclause1) = funclause1 ()
 in ((expr1,expr2) :: funclause)
end)
 in ( LrTable.NT 5, ( result, CLAUSE1left, funclause1right), rest671)

end
|  ( 14, ( rest671)) => let val  result = MlyValue.funclause (fn _ =>
 ([]))
 in ( LrTable.NT 5, ( result, defaultPos, defaultPos), rest671)
end
|  ( 15, ( ( _, ( MlyValue.dtclauses dtclauses1, _, dtclauses1right))
 :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
DATATYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.datatypestm (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 val  (dtclauses as dtclauses1) = dtclauses1 ()
 in (A.DatatypeBinding(IDENT,dtclauses))
end)
 in ( LrTable.NT 10, ( result, DATATYPE1left, dtclauses1right), 
rest671)
end
|  ( 16, ( ( _, ( MlyValue.dtclauses dtclauses1, _, dtclauses1right))
 :: _ :: ( _, ( MlyValue.dtclause dtclause1, dtclause1left, _)) :: 
rest671)) => let val  result = MlyValue.dtclauses (fn _ => let val  (
dtclause as dtclause1) = dtclause1 ()
 val  (dtclauses as dtclauses1) = dtclauses1 ()
 in (dtclause :: dtclauses)
end)
 in ( LrTable.NT 8, ( result, dtclause1left, dtclauses1right), rest671
)
end
|  ( 17, ( ( _, ( MlyValue.dtclause dtclause1, dtclause1left, 
dtclause1right)) :: rest671)) => let val  result = MlyValue.dtclauses
 (fn _ => let val  (dtclause as dtclause1) = dtclause1 ()
 in ([dtclause])
end)
 in ( LrTable.NT 8, ( result, dtclause1left, dtclause1right), rest671)

end
|  ( 18, ( ( _, ( MlyValue.typeexpr typeexpr1, _, typeexpr1right)) ::
 _ :: ( _, ( MlyValue.IDENT IDENT1, IDENT1left, _)) :: rest671)) =>
 let val  result = MlyValue.dtclause (fn _ => let val  (IDENT as 
IDENT1) = IDENT1 ()
 val  (typeexpr as typeexpr1) = typeexpr1 ()
 in ((IDENT,SOME typeexpr))
end)
 in ( LrTable.NT 9, ( result, IDENT1left, typeexpr1right), rest671)

end
|  ( 19, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.dtclause (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 in ((IDENT,NONE))
end)
 in ( LrTable.NT 9, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.anonfnclause anonfnclause1, _, 
anonfnclause1right)) :: ( _, ( MlyValue.expr expr2, _, _)) :: _ :: ( _
, ( MlyValue.expr expr1, _, _)) :: ( _, ( _, CLAUSE1left, _)) :: 
rest671)) => let val  result = MlyValue.anonfnclause (fn _ => let val 
 expr1 = expr1 ()
 val  expr2 = expr2 ()
 val  (anonfnclause as anonfnclause1) = anonfnclause1 ()
 in ((expr1,expr2) :: anonfnclause)
end)
 in ( LrTable.NT 6, ( result, CLAUSE1left, anonfnclause1right), 
rest671)
end
|  ( 21, ( rest671)) => let val  result = MlyValue.anonfnclause (fn _
 => ([]))
 in ( LrTable.NT 6, ( result, defaultPos, defaultPos), rest671)
end
|  ( 22, ( ( _, ( MlyValue.anonfnclause anonfnclause1, _, 
anonfnclause1right)) :: ( _, ( MlyValue.expr expr2, _, _)) :: _ :: ( _
, ( MlyValue.expr expr1, _, _)) :: ( _, ( _, FN1left, _)) :: rest671))
 => let val  result = MlyValue.anonfnexpr (fn _ => let val  expr1 = 
expr1 ()
 val  expr2 = expr2 ()
 val  (anonfnclause as anonfnclause1) = anonfnclause1 ()
 in (A.AnonFn((expr1,expr2) :: anonfnclause))
end)
 in ( LrTable.NT 7, ( result, FN1left, anonfnclause1right), rest671)

end
|  ( 23, ( ( _, ( MlyValue.LINT LINT1, LINT1left, LINT1right)) :: 
rest671)) => let val  result = MlyValue.expr (fn _ => let val  (LINT
 as LINT1) = LINT1 ()
 in (A.Integer LINT)
end)
 in ( LrTable.NT 11, ( result, LINT1left, LINT1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.LSTR LSTR1, LSTR1left, LSTR1right)) :: 
rest671)) => let val  result = MlyValue.expr (fn _ => let val  (LSTR
 as LSTR1) = LSTR1 ()
 in (A.String LSTR)
end)
 in ( LrTable.NT 11, ( result, LSTR1left, LSTR1right), rest671)
end
|  ( 25, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.expr (fn _ => (A.Nil))
 in ( LrTable.NT 11, ( result, NIL1left, NIL1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.anonfnexpr anonfnexpr1, anonfnexpr1left, 
anonfnexpr1right)) :: rest671)) => let val  result = MlyValue.expr (fn
 _ => let val  (anonfnexpr as anonfnexpr1) = anonfnexpr1 ()
 in (anonfnexpr)
end)
 in ( LrTable.NT 11, ( result, anonfnexpr1left, anonfnexpr1right), 
rest671)
end
|  ( 27, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.expr (fn _ => let val  (IDENT
 as IDENT1) = IDENT1 ()
 in (A.Var (IDENT,NONE))
end)
 in ( LrTable.NT 11, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.expr expr1, _, expr1right)) :: ( _, ( _, 
BANG1left, _)) :: rest671)) => let val  result = MlyValue.expr (fn _
 => let val  (expr as expr1) = expr1 ()
 in (A.Deref expr)
end)
 in ( LrTable.NT 11, ( result, BANG1left, expr1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.expr expr1, _, expr1right)) :: ( _, ( _, 
UMINUS1left, _)) :: rest671)) => let val  result = MlyValue.expr (fn _
 => let val  (expr as expr1) = expr1 ()
 in (A.UMinus expr)
end)
 in ( LrTable.NT 11, ( result, UMINUS1left, expr1right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Cons,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Plus,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Minus,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Times,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Divide,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Eq,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.LtEq,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.GtEq,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Lt,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Gt,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.NEq,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.BinOp (expr1,A.Assign,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 42, ( ( _, ( _, TRUE1left, TRUE1right)) :: rest671)) => let val  
result = MlyValue.expr (fn _ => (A.True))
 in ( LrTable.NT 11, ( result, TRUE1left, TRUE1right), rest671)
end
|  ( 43, ( ( _, ( _, FALSE1left, FALSE1right)) :: rest671)) => let
 val  result = MlyValue.expr (fn _ => (A.False))
 in ( LrTable.NT 11, ( result, FALSE1left, FALSE1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.expr expr1, _, expr1right)) :: ( _, ( _, 
BNOT1left, _)) :: rest671)) => let val  result = MlyValue.expr (fn _
 => let val  (expr as expr1) = expr1 ()
 in (A.BNot expr)
end)
 in ( LrTable.NT 11, ( result, BNOT1left, expr1right), rest671)
end
|  ( 45, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.expr expr1, _,
 _)) :: ( _, ( _, LPAR1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  (expr as expr1) = expr1 ()
 in (expr)
end)
 in ( LrTable.NT 11, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.expr expr3, _, expr3right)) :: _ :: ( _, ( 
MlyValue.expr expr2, _, _)) :: _ :: ( _, ( MlyValue.expr expr1, _, _))
 :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 val  expr3 = expr3 ()
 in (A.If (expr1,expr2,expr3))
end)
 in ( LrTable.NT 11, ( result, IF1left, expr3right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _
)) :: ( _, ( _, LET1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.Let (IDENT,expr1,expr2))
end)
 in ( LrTable.NT 11, ( result, LET1left, expr2right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.Seq (expr1,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.typeexpr typeexpr1, _, typeexpr1right)) ::
 _ :: ( _, ( MlyValue.expr expr1, expr1left, _)) :: rest671)) => let
 val  result = MlyValue.expr (fn _ => let val  (expr as expr1) = expr1
 ()
 val  (typeexpr as typeexpr1) = typeexpr1 ()
 in (A.TypeAnnotation(expr,typeexpr))
end)
 in ( LrTable.NT 11, ( result, expr1left, typeexpr1right), rest671)

end
|  ( 50, ( ( _, ( _, _, RPAR1right)) :: ( _, ( _, LPAR1left, _)) :: 
rest671)) => let val  result = MlyValue.expr (fn _ => (A.Unit))
 in ( LrTable.NT 11, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 51, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.tupleexpr 
tupleexpr1, _, _)) :: ( _, ( _, LPAR1left, _)) :: rest671)) => let
 val  result = MlyValue.expr (fn _ => let val  (tupleexpr as 
tupleexpr1) = tupleexpr1 ()
 in (A.Tuple tupleexpr)
end)
 in ( LrTable.NT 11, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 52, ( ( _, ( _, _, RSQ1right)) :: ( _, ( _, LSQ1left, _)) :: 
rest671)) => let val  result = MlyValue.expr (fn _ => (A.Nil))
 in ( LrTable.NT 11, ( result, LSQ1left, RSQ1right), rest671)
end
|  ( 53, ( ( _, ( _, _, RSQ1right)) :: ( _, ( MlyValue.tupleexpr 
tupleexpr1, _, _)) :: ( _, ( _, LSQ1left, _)) :: rest671)) => let val 
 result = MlyValue.expr (fn _ => let val  (tupleexpr as tupleexpr1) = 
tupleexpr1 ()
 in (A.List tupleexpr)
end)
 in ( LrTable.NT 11, ( result, LSQ1left, RSQ1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.expr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (A.App (expr1,expr2))
end)
 in ( LrTable.NT 11, ( result, expr1left, expr2right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.tupleexpr tupleexpr1, _, tupleexpr1right))
 :: _ :: ( _, ( MlyValue.expr expr1, expr1left, _)) :: rest671)) =>
 let val  result = MlyValue.tupleexpr (fn _ => let val  (expr as expr1
) = expr1 ()
 val  (tupleexpr as tupleexpr1) = tupleexpr1 ()
 in (expr :: tupleexpr)
end)
 in ( LrTable.NT 12, ( result, expr1left, tupleexpr1right), rest671)

end
|  ( 56, ( ( _, ( MlyValue.expr expr2, _, expr2right)) :: _ :: ( _, ( 
MlyValue.expr expr1, expr1left, _)) :: rest671)) => let val  result = 
MlyValue.tupleexpr (fn _ => let val  expr1 = expr1 ()
 val  expr2 = expr2 ()
 in (expr1 :: expr2 :: nil)
end)
 in ( LrTable.NT 12, ( result, expr1left, expr2right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.typeexpr typeexpr2, _, typeexpr2right)) :: 
( _, ( MlyValue.typeexpr typeexpr1, typeexpr1left, _)) :: rest671)) =>
 let val  result = MlyValue.typeexpr (fn _ => let val  typeexpr1 = 
typeexpr1 ()
 val  typeexpr2 = typeexpr2 ()
 in (A.TyCon(typeexpr1,typeexpr2))
end)
 in ( LrTable.NT 13, ( result, typeexpr1left, typeexpr2right), rest671
)
end
|  ( 58, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.typeexpr 
typeexpr1, _, _)) :: ( _, ( _, LPAR1left, _)) :: rest671)) => let val 
 result = MlyValue.typeexpr (fn _ => let val  (typeexpr as typeexpr1)
 = typeexpr1 ()
 in (typeexpr)
end)
 in ( LrTable.NT 13, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.typeexpr (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 in (A.TyName IDENT)
end)
 in ( LrTable.NT 13, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.typeexpr typeexpr2, _, typeexpr2right)) ::
 _ :: ( _, ( MlyValue.typeexpr typeexpr1, typeexpr1left, _)) :: 
rest671)) => let val  result = MlyValue.typeexpr (fn _ => let val  
typeexpr1 = typeexpr1 ()
 val  typeexpr2 = typeexpr2 ()
 in (A.TyArrow (typeexpr1, typeexpr2))
end)
 in ( LrTable.NT 13, ( result, typeexpr1left, typeexpr2right), rest671
)
end
|  ( 61, ( ( _, ( MlyValue.typeexpr typeexpr2, _, typeexpr2right)) ::
 _ :: ( _, ( MlyValue.typeexpr typeexpr1, typeexpr1left, _)) :: 
rest671)) => let val  result = MlyValue.typeexpr (fn _ => let val  
typeexpr1 = typeexpr1 ()
 val  typeexpr2 = typeexpr2 ()
 in (A.TyTup(typeexpr1, typeexpr2))
end)
 in ( LrTable.NT 13, ( result, typeexpr1left, typeexpr2right), rest671
)
end
|  ( 62, ( ( _, ( MlyValue.typeexpr typeexpr2, _, typeexpr2right)) ::
 _ :: ( _, ( MlyValue.behavty behavty1, _, _)) :: _ :: ( _, ( 
MlyValue.typeexpr typeexpr1, typeexpr1left, _)) :: rest671)) => let
 val  result = MlyValue.typeexpr (fn _ => let val  typeexpr1 = 
typeexpr1 ()
 val  behavty1 = behavty1 ()
 val  typeexpr2 = typeexpr2 ()
 in (A.TyArrow(typeexpr1,typeexpr2))
end)
 in ( LrTable.NT 13, ( result, typeexpr1left, typeexpr2right), rest671
)
end
|  ( 63, ( ( _, ( MlyValue.idwithtype idwithtype1, idwithtype1left, 
idwithtype1right)) :: rest671)) => let val  result = MlyValue.behavty
 (fn _ => let val  (idwithtype as idwithtype1) = idwithtype1 ()
 in (A.BTIdentifier idwithtype)
end)
 in ( LrTable.NT 14, ( result, idwithtype1left, idwithtype1right), 
rest671)
end
|  ( 64, ( ( _, ( MlyValue.behavty behavty2, _, behavty2right)) :: _
 :: ( _, ( MlyValue.behavty behavty1, behavty1left, _)) :: rest671))
 => let val  result = MlyValue.behavty (fn _ => let val  behavty1 = 
behavty1 ()
 val  behavty2 = behavty2 ()
 in (A.BTChoice (behavty1,behavty2))
end)
 in ( LrTable.NT 14, ( result, behavty1left, behavty2right), rest671)

end
|  ( 65, ( ( _, ( MlyValue.behavty behavty2, _, behavty2right)) :: _
 :: ( _, ( MlyValue.behavty behavty1, behavty1left, _)) :: rest671))
 => let val  result = MlyValue.behavty (fn _ => let val  behavty1 = 
behavty1 ()
 val  behavty2 = behavty2 ()
 in (A.BTCompose (behavty1,behavty2))
end)
 in ( LrTable.NT 14, ( result, behavty1left, behavty2right), rest671)

end
|  ( 66, ( ( _, ( MlyValue.typeexpr typeexpr1, _, typeexpr1right)) ::
 _ :: ( _, ( MlyValue.behavty behavty1, behavty1left, _)) :: rest671))
 => let val  result = MlyValue.behavty (fn _ => let val  (behavty as 
behavty1) = behavty1 ()
 val  (typeexpr as typeexpr1) = typeexpr1 ()
 in (A.BTSend (behavty, SOME typeexpr))
end)
 in ( LrTable.NT 14, ( result, behavty1left, typeexpr1right), rest671)

end
|  ( 67, ( ( _, ( MlyValue.typeexpr typeexpr1, _, typeexpr1right)) ::
 _ :: ( _, ( MlyValue.behavty behavty1, behavty1left, _)) :: rest671))
 => let val  result = MlyValue.behavty (fn _ => let val  (behavty as 
behavty1) = behavty1 ()
 val  (typeexpr as typeexpr1) = typeexpr1 ()
 in (A.BTRecv (behavty, SOME typeexpr))
end)
 in ( LrTable.NT 14, ( result, behavty1left, typeexpr1right), rest671)

end
|  ( 68, ( ( _, ( MlyValue.behavty behavty2, _, behavty2right)) :: _
 :: ( _, ( MlyValue.behavty behavty1, behavty1left, _)) :: rest671))
 => let val  result = MlyValue.behavty (fn _ => let val  behavty1 = 
behavty1 ()
 val  behavty2 = behavty2 ()
 in (A.BTSeq (behavty1,behavty2))
end)
 in ( LrTable.NT 14, ( result, behavty1left, behavty2right), rest671)

end
|  ( 69, ( ( _, ( _, _, RPAR1right)) :: ( _, ( MlyValue.behavty 
behavty1, _, _)) :: ( _, ( _, LPAR1left, _)) :: rest671)) => let val  
result = MlyValue.behavty (fn _ => let val  (behavty as behavty1) = 
behavty1 ()
 in (behavty)
end)
 in ( LrTable.NT 14, ( result, LPAR1left, RPAR1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.prog x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Lml_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun SIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun SIGNATURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun TRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun FALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun LINT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.LINT (fn () => i),p1,p2))
fun LREAL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.LREAL (fn () => i),p1,p2))
fun BTYPESTART (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun BTYPEEND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun BTYPERECV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun BANG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun BTYPECOMP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun BTYPECHOICE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun ASCRIBEO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FNASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun MUTASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun GTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun BAND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun BOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun BNOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun CLAUSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPEDELIM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun IDENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.IDENT (fn () => i),p1,p2))
fun LPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun LBR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun RBR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun LSQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun RSQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun CONS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun LSTR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.LSTR (fn () => i),p1,p2))
fun ERROR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
end
end
